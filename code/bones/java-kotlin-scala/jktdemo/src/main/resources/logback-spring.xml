<?xml version="1.0" encoding="UTF-8"?>
<configuration>

  <!-- 常量定义start -->
  <property name="APPNAME" value="jktdemo" />
  <!-- 默认日志输出格式 -->
  <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
  <property name="DEFAULT_PATTERN"
    value="%d{yyyy-MM-dd HH:mm:ss.SSS}$$[${HOSTNAME}]$$%(%level)$$[${APPNAME}]$$[%thread]$$[%file:%line]$$[%M]$$%msg%n"/>
  <!--历史记录最大保存天数-->
  <property name="MAX_HISTORY" value="30"/>
  <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
  <property name="log.directory" value="/home/logs/${APPNAME}" />
  <!--日志的字符编码-->
  <property name="log.charset" value="UTF-8" />
  <!--异步写日志的队列大小配置，默认为256-->
  <property name="log.async.queue.size" value="1024" />
  <!-- 常量定义end -->


  <!--配置日志的上下文名称-->
  <contextName>${APPNAME}</contextName>

  <!--对应spring环境变量为local的日志配置，只做控制台输出配置-->
  <springProfile name="local">
    <!--控制台日志输出配置，可以匹配色彩和高亮-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
      <encoder>
        <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %highlight(%-5level) %cyan(%logger{50}) - %yellow([%file:%line]) - %msg%n</pattern>
        <!--<pattern>${DEFAULT_PATTERN}</pattern>-->
        <charset>${log.charset}</charset>
      </encoder>
    </appender>
  </springProfile>

  <springProfile name="dohko,pre,production,ali">
    <!-- 服务器上使用的appender start -->
    <!-- 默认的file appender，按天切分日志 -->
    <appender name="ROLLING_FILE_DEFAULT" class="ch.qos.logback.core.rolling.RollingFileAppender">
      <!--<file>${log.directory}/${HOSTNAME}_stdout.log</file>-->
      <append>true</append>
      <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        <fileNamePattern>${log.directory}/${HOSTNAME}_stdout.%d{yyyy-MM-dd}.log</fileNamePattern>
        <maxHistory>${MAX_HISTORY}</maxHistory>
      </rollingPolicy>
      <encoder>
        <pattern>${DEFAULT_PATTERN}</pattern>
        <charset>${log.charset}</charset>
      </encoder>
    </appender>

    <!-- 错误日志，按天切分 -->
    <appender name="ROLLING_FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
      <filter class="ch.qos.logback.classic.filter.LevelFilter">
        <level>ERROR</level>
        <onMatch>ACCEPT</onMatch>
        <onMismatch>DENY</onMismatch>
      </filter>
      <!--<file>${log.directory}/${HOSTNAME}_error.log</file>-->
      <!-- 日志追加配置 -->
      <append>true</append>
      <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        <fileNamePattern>${log.directory}/${HOSTNAME}_error.%d{yyyy-MM-dd}.log</fileNamePattern>
        <maxHistory>${MAX_HISTORY}</maxHistory>
      </rollingPolicy>
      <!-- 此日志文件只记录error级别的 -->
      <encoder>
        <pattern>${DEFAULT_PATTERN}</pattern>
        <charset>${log.charset}</charset>
      </encoder>
    </appender>

    <!-- 异步写日志文件的配置 -->
    <appender name ="ASYNC_FILE" class= "ch.qos.logback.classic.AsyncAppender">
      <!-- 当队列达到配置队列大小的80%时，不将日志丢失 -->
      <discardingThreshold >0</discardingThreshold>
      <queueSize>${log.async.queue.size}</queueSize>
      <includeCallerData>true</includeCallerData>  <!--异步默认关闭文件以及行号信息-->
      <appender-ref ref = "ROLLING_FILE_DEFAULT"/>
    </appender>
  </springProfile>

  <!--&lt;!&ndash; rabbitmq的日志专属配置 &ndash;&gt;-->
  <!--<logger name = "org.springframework.amqp.rabbit.listener.BlockingQueueConsumer" level ="WARN"/>-->
  <!--&lt;!&ndash; zookeeper 的日志专属配置 &ndash;&gt;-->
  <!--<logger name = "org.apache.zookeeper.ClientCnxn" level ="WARN"/>-->
  <!--&lt;!&ndash; 多数据源 的日志专属配置 &ndash;&gt;-->
  <!--<logger name = "com.hualala.commons.multidatasource.curator.CuratorClient" level ="WARN"/>-->
  <!--<logger name = "com.hualala.commons.multidatasource.datasource.DynamicDataSource" level ="WARN"/>-->
  <!--&lt;!&ndash; 设置falcon监控的日志输出格式 &ndash;&gt;-->
  <!--<logger name = "com.hualala.infrastructure.falcon.FalconMonitor" level ="WARN"/>-->

  <!--&lt;!&ndash;mybatis的日志专属配置 &ndash;&gt;-->
  <!--<logger name="jdbc.sqltiming" level="debug"/>-->
  <!--<logger name="com.ibatis" level="debug" />-->
  <!--<logger name="com.ibatis.common.jdbc.SimpleDataSource" level="debug" />-->
  <!--<logger name="com.ibatis.common.jdbc.ScriptRunner" level="debug" />-->
  <!--<logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" level="debug" />-->
  <!--<logger name="java.sql.Connection" level="debug" />-->
  <!--<logger name="java.sql.Statement" level="debug" />-->
  <!--<logger name="java.sql.PreparedStatement" level="debug" />-->
  <!--<logger name="java.sql.ResultSet" level="debug" />-->

  <!--<logger name="org.springframework" level="WARN" />-->

  <!-- 当前项目 的不同环境的日志级别配置 -->
  <logger name="com.sf" level="debug" additivity="false">
    <springProfile name="local">
      <appender-ref ref="STDOUT" />
    </springProfile>

    <springProfile name="dohko,pre">
      <appender-ref ref="ASYNC_FILE" />
      <appender-ref ref="ROLLING_FILE_ERROR" />
    </springProfile>

    <springProfile name="production,ali">
      <appender-ref ref="ASYNC_FILE" />
      <appender-ref ref="ROLLING_FILE_ERROR" />
    </springProfile>
  </logger>

  <root>
    <springProfile name="local">
      <level value="info"/>
      <appender-ref ref="STDOUT" />
    </springProfile>

    <!-- dohko环境用来测试，日志级别尽量可以设置的低，便于定位问题 -->
    <springProfile name="dohko,pre">
      <level value="info"/>

      <appender-ref ref="ASYNC_FILE" />
      <appender-ref ref="ROLLING_FILE_ERROR" />
    </springProfile>

    <!-- pre环境用来做压测，避免对测试环境的日志服务产生压力，日志级别设置为warn -->
    <springProfile name="pre">
      <level value="warn"/>

      <appender-ref ref="ASYNC_FILE" />
      <appender-ref ref="ROLLING_FILE_ERROR" />
    </springProfile>

    <!-- production为生产环境，需要记录能够定位问题或流程流转的日志，但是非必要的日志无须记录 -->
    <springProfile name="production,ali">
      <level value="info"/>
      <appender-ref ref="ASYNC_FILE" />
      <appender-ref ref="ROLLING_FILE_ERROR" />
    </springProfile>
  </root>

</configuration>